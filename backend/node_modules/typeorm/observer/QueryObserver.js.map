{"version":3,"sources":["../../src/observer/QueryObserver.ts"],"names":[],"mappings":"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","file":"QueryObserver.js","sourcesContent":["import {FindOptions, FindOptionsWhere} from \"../find-options/FindOptions\";\nimport {\n    Connection,\n    EntityMetadata,\n    EntitySubscriberInterface,\n    InsertEvent,\n    ObjectLiteral,\n    RemoveEvent,\n    UpdateEvent\n} from \"../index\";\nimport * as Observable from \"zen-observable\";\n\n// todo: we probably need operation-level subscribers\n// todo: right now if we save 1000 entities within a single save call its going to call this code 1000 times\n// todo: which is not efficient\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class QueryObserver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    insertEvents: InsertEvent<any>[] = [];\n    updateEvents: UpdateEvent<any>[] = [];\n    removeEvents: RemoveEvent<any>[] = [];\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    public isSubscriberActive: boolean = false;\n    public lastEmitEntities: ObjectLiteral[] = [];\n    public lastEmitEntity: ObjectLiteral|undefined;\n    public lastEmitCount: number;\n    public subscriptionObserver: ZenObservable.SubscriptionObserver<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        public connection: Connection,\n        public type: \"find\"|\"findOne\"|\"findAndCount\"|\"count\",\n        public metadata: EntityMetadata,\n        public options?: FindOptions<any>|FindOptionsWhere<any>,\n    ) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds entities that match given options and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observe(): Observable<any> {\n        this.connection.observers.push(this);\n        return new Observable(subscriptionObserver => {\n            this.subscriptionObserver = subscriptionObserver;\n            this.isSubscriberActive = true;\n\n            // we find entities matching our query\n            switch (this.type) {\n                case \"find\":\n                    this.connection.manager.find(this.metadata.target as any, this.options as any).then(entities => {\n                        subscriptionObserver.next(entities);\n                        this.lastEmitEntities = entities;\n                        this.connection.subscribers.push(this.subscriber);\n                    });\n                    break;\n\n                case \"findOne\":\n                    this.connection.manager.findOne(this.metadata.target as any, this.options as any).then(entity => {\n                        subscriptionObserver.next(entity);\n                        this.lastEmitEntity = entity;\n                        this.connection.subscribers.push(this.subscriber);\n                    });\n                    break;\n\n                case \"findAndCount\":\n                    this.connection.manager.findAndCount(this.metadata.target as any, this.options as any).then(([entities, count]) => {\n                        subscriptionObserver.next([entities, count]);\n                        this.lastEmitCount = count;\n                        this.lastEmitEntities = entities;\n                        this.connection.subscribers.push(this.subscriber);\n                    });\n                    break;\n\n                case \"count\":\n                    this.connection.manager.count(this.metadata.target as any, this.options as any, { observers: false }).then(count => {\n                        subscriptionObserver.next(count);\n                        this.lastEmitCount = count;\n                        this.connection.subscribers.push(this.subscriber);\n                    });\n                    break;\n            }\n\n            // remove subscription on cancellation\n            return () => {\n\n                // remove registered subscriber\n                if (this.subscriber) {\n                    const index = this.connection.subscribers.indexOf(this.subscriber);\n                    if (index !== -1)\n                        this.connection.subscribers.splice(index, 1);\n                }\n\n                // remove registered observer\n                const index = this.connection.observers.indexOf(this);\n                if (index !== -1)\n                    this.connection.observers.splice(index, 1);\n            };\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private subscriber: EntitySubscriberInterface<any> = {\n        listenTo: () => {\n            return this.metadata.target;\n        },\n        afterInsert: (event: InsertEvent<any>) => {\n            if (!this.subscriptionObserver || !this.isSubscriberActive)\n                return;\n\n            this.insertEvents.push(event);\n        },\n        afterUpdate: event => {\n            if (!this.subscriptionObserver || !this.isSubscriberActive)\n                return;\n\n            this.updateEvents.push(event);\n        },\n        afterRemove: event => {\n            if (!this.subscriptionObserver || !this.isSubscriberActive)\n                return;\n\n            this.removeEvents.push(event);\n        }\n    };\n\n}\n"],"sourceRoot":".."}