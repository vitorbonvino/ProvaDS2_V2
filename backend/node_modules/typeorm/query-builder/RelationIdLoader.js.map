{"version":3,"sources":["../../src/query-builder/RelationIdLoader.ts"],"names":[],"mappings":"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","file":"RelationIdLoader.js","sourcesContent":["import {Connection, ObjectLiteral, SelectQueryBuilder} from \"../\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n * Loads relation ids for the given entities.\n */\nexport class RelationIdLoader {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads relation ids of the given entity or entities.\n     */\n    load(relation: RelationMetadata, entityOrEntities: ObjectLiteral|ObjectLiteral[], relatedEntityOrRelatedEntities?: ObjectLiteral|ObjectLiteral[]): Promise<any[]> {\n\n        const entities = entityOrEntities instanceof Array ? entityOrEntities : [entityOrEntities];\n        const relatedEntities = relatedEntityOrRelatedEntities instanceof Array ? relatedEntityOrRelatedEntities : (relatedEntityOrRelatedEntities ? [relatedEntityOrRelatedEntities] : undefined);\n\n        // load relation ids depend of relation type\n        if (relation.isManyToMany) {\n            return this.loadForManyToMany(relation, entities, relatedEntities);\n\n        } else if (relation.isManyToOne || relation.isOneToOneOwner) {\n            return this.loadForManyToOneAndOneToOneOwner(relation, entities, relatedEntities);\n\n        } else { // if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            return this.loadForOneToManyAndOneToOneNotOwner(relation, entities, relatedEntities);\n        }\n    }\n\n    /**\n     * Loads relation ids of the given entities and groups them into the object with parent and children.\n     *\n     * todo: extract this method?\n     */\n    async loadManyToManyRelationIdsAndGroup<E1, E2>(\n        relation: RelationMetadata,\n        entitiesOrEntities: E1|E1[],\n        relatedEntityOrEntities?: E2|E2[],\n        queryBuilder?: SelectQueryBuilder<any>\n    ): Promise<{ entity: E1, related?: E2|E2[] }[]> {\n\n        // console.log(\"relation:\", relation.propertyName);\n        // console.log(\"entitiesOrEntities\", entitiesOrEntities);\n        const isMany = relation.isManyToMany || relation.isOneToMany;\n        const entities: E1[] = entitiesOrEntities instanceof Array ? entitiesOrEntities : [entitiesOrEntities];\n\n        if (!relatedEntityOrEntities) {\n            relatedEntityOrEntities = await this.connection.relationLoader.load(relation, entitiesOrEntities, undefined, queryBuilder);\n            if (!relatedEntityOrEntities.length)\n                return entities.map(entity => ({ entity: entity, related: isMany ? [] : undefined }));\n        }\n        // const relationIds = await this.load(relation, relatedEntityOrEntities!, entitiesOrEntities);\n        const relationIds = await this.load(relation, entitiesOrEntities, relatedEntityOrEntities);\n        // console.log(\"entities\", entities);\n        // console.log(\"relatedEntityOrEntities\", relatedEntityOrEntities);\n        // console.log(\"relationIds\", relationIds);\n\n        const relatedEntities: E2[] = relatedEntityOrEntities instanceof Array ? relatedEntityOrEntities : [relatedEntityOrEntities!];\n\n        let columns: ColumnMetadata[] = [], inverseColumns: ColumnMetadata[] = [];\n        if (relation.isManyToManyOwner) {\n            columns = relation.junctionEntityMetadata!.inverseColumns.map(column => column.referencedColumn!);\n            inverseColumns = relation.junctionEntityMetadata!.ownerColumns.map(column => column.referencedColumn!);\n\n        } else if (relation.isManyToManyNotOwner) {\n            columns = relation.junctionEntityMetadata!.ownerColumns.map(column => column.referencedColumn!);\n            inverseColumns = relation.junctionEntityMetadata!.inverseColumns.map(column => column.referencedColumn!);\n\n        } else if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.joinColumns.map(column => column.referencedColumn!);\n            inverseColumns = relation.entityMetadata.primaryColumns;\n\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation!.entityMetadata.primaryColumns;\n            inverseColumns = relation.inverseRelation!.joinColumns.map(column => column.referencedColumn!);\n\n        } else {\n\n        }\n\n        return entities.map(entity => {\n            const group: { entity: E1, related?: E2|E2[] } = { entity: entity, related: isMany ? [] : undefined };\n\n            const entityRelationIds = relationIds.filter(relationId => {\n                return inverseColumns.every(column => {\n                    return column.compareEntityValue(entity, relationId[column.entityMetadata.name + \"_\" + column.propertyAliasName]);\n                });\n            });\n            if (!entityRelationIds.length)\n                return group;\n\n            relatedEntities.forEach(relatedEntity => {\n                entityRelationIds.forEach(relationId => {\n                    const relatedEntityMatched = columns.every(column => {\n                        return column.compareEntityValue(relatedEntity, relationId[column.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.propertyPath.replace(\".\", \"_\")]);\n                    });\n                    if (relatedEntityMatched) {\n                        if (isMany) {\n                            (group.related as E2[]).push(relatedEntity);\n                        } else {\n                            group.related = relatedEntity;\n                        }\n                    }\n                });\n            });\n            return group;\n        });\n    }\n\n    /**\n     * Loads relation ids of the given entities and maps them into the given entity property.\n\n    async loadManyToManyRelationIdsAndMap(\n        relation: RelationMetadata,\n        entityOrEntities: ObjectLiteral|ObjectLiteral[],\n        mapToEntityOrEntities: ObjectLiteral|ObjectLiteral[],\n        propertyName: string\n    ): Promise<void> {\n\n        const relationIds = await this.loadManyToManyRelationIds(relation, entityOrEntities, mapToEntityOrEntities);\n        const mapToEntities = mapToEntityOrEntities instanceof Array ? mapToEntityOrEntities : [mapToEntityOrEntities];\n        const junctionMetadata = relation.junctionEntityMetadata!;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        const inverseColumns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n\n        mapToEntities.forEach(mapToEntity => {\n            mapToEntity[propertyName] = [];\n            relationIds.forEach(relationId => {\n                const match = inverseColumns.every(column => {\n                    return column.referencedColumn!.getEntityValue(mapToEntity) === relationId[mainAlias + \"_\" + column.propertyName];\n                });\n                if (match) {\n                    if (columns.length === 1) {\n                        mapToEntity[propertyName].push(relationId[mainAlias + \"_\" + columns[0].propertyName]);\n\n                    } else {\n                        const value = {};\n                        columns.forEach(column => {\n                            column.referencedColumn!.setEntityValue(value, relationId[mainAlias + \"_\" + column.propertyName]);\n                        });\n                        mapToEntity[propertyName].push(value);\n                    }\n                }\n            });\n        });\n    }*/\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads relation ids for the many-to-many relation.\n     */\n    protected loadForManyToMany(relation: RelationMetadata, entities: ObjectLiteral[], relatedEntities?: ObjectLiteral[]) {\n\n        const junctionMetadata = relation.junctionEntityMetadata!;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n        const inverseColumns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        const qb = this.connection.createQueryBuilder();\n\n        // select all columns from junction table\n        columns.forEach(column => {\n            const columnName = column.referencedColumn!.entityMetadata.name + \"_\" + column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        inverseColumns.forEach(column => {\n            const columnName = column.referencedColumn!.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n\n        // add conditions for the given entities\n        let condition1 = \"\";\n        if (columns.length === 1) {\n\n            const values = entities.map(entity => columns[0].referencedColumn!.getEntityValue(entity));\n            const areAllNumbers = values.every(value => typeof value === \"number\");\n\n            if (areAllNumbers) {\n                condition1 = mainAlias + \".\" + columns[0].propertyPath + ` IN (${values.join(\", \")})`;\n            } else {\n                qb.setParameter(\"values1\", values);\n                condition1 = mainAlias + \".\" + columns[0].propertyPath + \" IN (:...values1)\"; // todo: use ANY for postgres\n            }\n\n        } else {\n            condition1 = \"(\" + entities.map((entity, entityIndex) => {\n                return columns.map(column => {\n                    const paramName = \"entity1_\" + entityIndex + \"_\" + column.propertyName;\n                    qb.setParameter(paramName, column.referencedColumn!.getEntityValue(entity));\n                    return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \") + \")\";\n        }\n\n        // add conditions for the given inverse entities\n        let condition2 = \"\";\n        if (relatedEntities) {\n            if (inverseColumns.length === 1) {\n                const values = relatedEntities.map(entity => inverseColumns[0].referencedColumn!.getEntityValue(entity));\n                const areAllNumbers = values.every(value => typeof value === \"number\");\n\n                if (areAllNumbers) {\n                    condition2 = mainAlias + \".\" + columns[0].propertyPath + ` IN (${values.join(\", \")})`;\n                } else {\n                    qb.setParameter(\"values2\", values);\n                    condition2 = mainAlias + \".\" + inverseColumns[0].propertyPath + \" IN (:...values2)\"; // todo: use ANY for postgres\n                }\n\n            } else {\n                condition2 = \"(\" + relatedEntities.map((entity, entityIndex) => {\n                    return inverseColumns.map(column => {\n                        const paramName = \"entity2_\" + entityIndex + \"_\" + column.propertyName;\n                        qb.setParameter(paramName, column.referencedColumn!.getEntityValue(entity));\n                        return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                    }).join(\" AND \");\n                }).map(condition => \"(\" + condition + \")\").join(\" OR \") + \")\";\n            }\n        }\n\n        // qb.from(junctionMetadata.target, mainAlias)\n        //     .where(condition1 + (condition2 ? \" AND \" + condition2 : \"\"));\n        //\n        // // execute query\n        // const { values1, values2 } = qb.getParameters();\n        // console.log(`I can do it`, { values1, values2 });\n        // if (inverseColumns.length === 1 &&\n        //     columns.length === 1 &&\n        //     this.connection.driver instanceof SqliteDriver &&\n        //     (values1.length + values2.length) > 500 &&\n        //     values1.length === values2.length) {\n        //     console.log(`I can do it`);\n        //     return qb.getRawMany();\n        //\n        // } else {\n        //     return qb.getRawMany();\n        // }\n\n        // execute query\n        return qb\n            .from(junctionMetadata.target, mainAlias)\n            .where(condition1 + (condition2 ? \" AND \" + condition2 : \"\"))\n            .getRawMany();\n    }\n\n    /**\n     * Loads relation ids for the many-to-one and one-to-one owner relations.\n     */\n    protected loadForManyToOneAndOneToOneOwner(relation: RelationMetadata, entities: ObjectLiteral[], relatedEntities?: ObjectLiteral[]) {\n        const mainAlias = relation.entityMetadata.targetName;\n\n        // console.log(\"entitiesx\", entities);\n        // console.log(\"relatedEntitiesx\", relatedEntities);\n        const hasAllJoinColumnsInEntity = relation.joinColumns.every(joinColumn => {\n            return !!relation.entityMetadata.nonVirtualColumns.find(column => column === joinColumn);\n        });\n        if (relatedEntities && hasAllJoinColumnsInEntity) {\n            let relationIdMaps: ObjectLiteral[] = [];\n            entities.forEach(entity => {\n                let relationIdMap: ObjectLiteral = {};\n                relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n                    const key = primaryColumn.entityMetadata.name + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n                    relationIdMap[key] = primaryColumn.getEntityValue(entity);\n                });\n\n                relatedEntities.forEach(relatedEntity => {\n                    relation.joinColumns.forEach(joinColumn => {\n                        const entityColumnValue = joinColumn.getEntityValue(entity);\n                        const relatedEntityColumnValue = joinColumn.referencedColumn!.getEntityValue(relatedEntity);\n                        if (entityColumnValue === undefined || relatedEntityColumnValue === undefined)\n                            return;\n\n                        if (entityColumnValue === relatedEntityColumnValue) {\n                            const key = joinColumn.referencedColumn!.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + joinColumn.referencedColumn!.propertyPath.replace(\".\", \"_\");\n                            relationIdMap[key] = relatedEntityColumnValue;\n                        }\n                    });\n                });\n                if (Object.keys(relationIdMap).length === relation.entityMetadata.primaryColumns.length + relation.joinColumns.length) {\n                    relationIdMaps.push(relationIdMap);\n                }\n            });\n            // console.log(\"relationIdMap\", relationIdMaps);\n            // console.log(\"entities.length\", entities.length);\n            if (relationIdMaps.length === entities.length)\n                return Promise.resolve(relationIdMaps);\n        }\n\n        // select all columns we need\n        const qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n            const columnName = primaryColumn.entityMetadata.name + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach(column => {\n            const columnName = column.referencedColumn!.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n\n        // add condition for entities\n        let condition: string = \"\";\n        if (relation.entityMetadata.primaryColumns.length === 1) {\n\n            const values = entities.map(entity => relation.entityMetadata.primaryColumns[0].getEntityValue(entity));\n            const areAllNumbers = values.every(value => typeof value === \"number\");\n\n            if (areAllNumbers) {\n                condition = `${mainAlias}.${relation.entityMetadata.primaryColumns[0].propertyPath} IN (${values.join(\", \")})`;\n            } else {\n                qb.setParameter(\"values\", values);\n                condition = mainAlias + \".\" + relation.entityMetadata.primaryColumns[0].propertyPath + \" IN (:...values)\"; // todo: use ANY for postgres\n            }\n\n        } else {\n            condition = entities.map((entity, entityIndex) => {\n                return relation.entityMetadata.primaryColumns.map((column, columnIndex) => {\n                    const paramName = \"entity\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.getEntityValue(entity));\n                    return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \");\n        }\n\n        // execute query\n        return qb.from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    }\n\n    /**\n     * Loads relation ids for the one-to-many and one-to-one not owner relations.\n     */\n    protected loadForOneToManyAndOneToOneNotOwner(relation: RelationMetadata, entities: ObjectLiteral[], relatedEntities?: ObjectLiteral[]) {\n        relation = relation.inverseRelation!;\n\n        if (relation.entityMetadata.primaryColumns.length === relation.joinColumns.length) {\n            const sameReferencedColumns = relation.entityMetadata.primaryColumns.every(column => {\n                return relation.joinColumns.indexOf(column) !== -1;\n            });\n            if (sameReferencedColumns) {\n                return Promise.resolve(entities.map(entity => {\n                    const result: ObjectLiteral = {};\n                    relation.joinColumns.forEach(function (joinColumn) {\n                        const value = joinColumn.referencedColumn!.getEntityValue(entity);\n                        const joinColumnName = joinColumn.referencedColumn!.entityMetadata.name + \"_\" + joinColumn.referencedColumn!.propertyPath.replace(\".\", \"_\");\n                        const primaryColumnName = joinColumn.entityMetadata.name + \"_\" + relation.inverseRelation!.propertyPath.replace(\".\", \"_\") + \"_\" + joinColumn.propertyPath.replace(\".\", \"_\");\n                        result[joinColumnName] = value;\n                        result[primaryColumnName] = value;\n                    });\n                    return result;\n                }));\n            }\n        }\n\n        const mainAlias = relation.entityMetadata.targetName;\n\n        // select all columns we need\n        const qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n            const columnName = primaryColumn.entityMetadata.name + \"_\" + relation.inverseRelation!.propertyPath.replace(\".\", \"_\") + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach(column => {\n            const columnName = column.referencedColumn!.entityMetadata.name + \"_\" + column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n\n        // add condition for entities\n        let condition: string = \"\";\n        if (relation.joinColumns.length === 1) {\n            const values = entities.map(entity => relation.joinColumns[0].referencedColumn!.getEntityValue(entity));\n            const areAllNumbers = values.every(value => typeof value === \"number\");\n\n            if (areAllNumbers) {\n                condition = `${mainAlias}.${relation.joinColumns[0].propertyPath} IN (${values.join(\", \")})`;\n            } else {\n                qb.setParameter(\"values\", values);\n                condition = mainAlias + \".\" + relation.joinColumns[0].propertyPath + \" IN (:...values)\"; // todo: use ANY for postgres\n            }\n\n        } else {\n            condition = entities.map((entity, entityIndex) => {\n                return relation.joinColumns.map((joinColumn, joinColumnIndex) => {\n                    const paramName = \"entity\" + entityIndex + \"_\" + joinColumnIndex;\n                    qb.setParameter(paramName, joinColumn.referencedColumn!.getEntityValue(entity));\n                    return mainAlias + \".\" + joinColumn.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(condition => \"(\" + condition + \")\").join(\" OR \");\n        }\n\n        // execute query\n        return qb.from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    }\n\n}\n"],"sourceRoot":".."}