{"version":3,"sources":["../../src/find-options/FindOptions.ts"],"names":[],"mappings":"","file":"FindOptions.js","sourcesContent":["import {FindOperator} from \"./FindOperator\";\nimport {QueryRunner} from \"..\";\n\n/**\n * Value of order by in find options.\n */\nexport type FindOptionsOrderByValue = \"ASC\" | \"DESC\" | \"asc\" | \"desc\" | 1 | -1 | {\n    direction?: \"asc\"|\"desc\"|\"ASC\"|\"DESC\";\n    nulls?: \"first\"|\"last\"|\"FIRST\"|\"LAST\";\n};\n\n/**\n * Order by find options.\n */\nexport type FindOptionsOrder<E> = {\n    [P in keyof E]?:\n        E[P] extends (infer R)[] ? FindOptionsOrder<R> :\n        E[P] extends Promise<infer R> ? FindOptionsOrder<R> :\n        E[P] extends object ? FindOptionsOrder<E[P]> :\n        FindOptionsOrderByValue;\n};\n\n/**\n * Filters and lefts only object-type properties from the object.\n * Used in relations find options.\n */\nexport type FindOptionsRelationKeyName<E> = {\n    [K in keyof E]:\n        E[K] extends object ? K :\n        E[K] extends object|null ? K :\n        E[K] extends object|undefined ? K :\n        never\n}[keyof E];\n\n/**\n * Flattens array type in the object.\n * Used in relations find options.\n */\nexport type FindOptionsRelationKey<E> = {\n    [P in keyof E]?:\n        E[P] extends (infer R)[] ? FindOptionsRelation<R> | boolean :\n        E[P] extends Promise<infer R> ? FindOptionsRelation<R> | boolean :\n        FindOptionsRelation<E[P]> | boolean;\n};\n\n/**\n * Relations find options.\n */\nexport type FindOptionsRelation<E> = FindOptionsRelationKeyName<E>[]|FindOptionsRelationKey<Pick<E, FindOptionsRelationKeyName<E>>>;\n\n/**\n * Select find options.\n */\nexport type FindOptionsSelect<E> = (keyof E)[]|{\n    [P in keyof E]?:\n        E[P] extends (infer R)[] ? FindOptionsSelect<R> | boolean :\n        E[P] extends Promise<infer R> ? FindOptionsSelect<R> | boolean :\n        E[P] extends object ? FindOptionsSelect<E[P]> | boolean :\n        boolean;\n};\n\n/**\n * \"where\" in find options.\n */\nexport type FindOptionsWhereCondition<E> = {\n    [P in keyof E]?:\n        E[P] extends (infer R)[] ? FindOptionsWhere<R> | boolean | FindOperator<number> | FindAltOperator<number> :\n        E[P] extends Promise<infer R> ? FindOptionsWhere<R> | boolean :\n        E[P] extends Object ? FindOperator<E[P]> | FindAltOperator<E[P]> | FindOptionsWhere<E[P]> | boolean :\n        FindOperator<E[P]> | FindAltOperator<E[P]> | E[P]\n};\n\n/**\n * \"where\" in find options.\n * Includes \"array where\" as well.\n */\nexport type FindOptionsWhere<E> = FindOptionsWhereCondition<E>|FindOptionsWhereCondition<E>[];\n\n/**\n * Alternative FindOperator syntax.\n */\nexport type FindAltOperator<T> = {\n    $any: T[] | FindAltOperator<T>\n} | {\n    $between: [T, T]\n} | {\n    $equal: T | FindAltOperator<T>\n} | {\n    $iLike: T | FindAltOperator<T>\n} | {\n    $in: T[] | FindAltOperator<T>\n} | {\n    $lessThan: T | FindAltOperator<T>\n} |  {\n    $like: T | FindAltOperator<T>\n} | {\n    $moreThan: T | FindAltOperator<T>\n} | {\n    $not: T | FindAltOperator<T>\n} | {\n    $raw: string\n};\n\n/**\n * Extra options that can be applied to FindOptions.\n */\nexport type FindExtraOptions = {\n\n    /**\n     * Indicates if eager relations should be loaded or not.\n     * Enabled by default.\n     */\n    eagerRelations?: boolean;\n\n    /**\n     * Indicates if special pagination query shall be applied to the query\n     * if skip or take in conjunction with joins is used.\n     * Enabled by default.\n     */\n    pagination?: boolean;\n\n    /**\n     * Indicates if listeners must be executed before and after the query execution.\n     * Enabled by default.\n     */\n    listeners?: boolean;\n\n    /**\n     * Indicates if observers must be executed before and after the query execution.\n     * Enabled by default.\n     */\n    observers?: boolean;\n\n    /**\n     * If sets to true then loads all relation ids of the entity and maps them into relation values (not relation objects).\n     * If array of strings is given then loads only relation ids of the given properties.\n     */\n    loadRelationIds?: boolean | {\n        relations?: string[];\n        disableMixedMap?: boolean;\n    }; // todo: extract options into separate interface, reuse\n\n    /**\n     * Uses provided query runner for query execution.\n     */\n    queryRunner?: QueryRunner;\n\n};\n\n/**\n * Advanced caching options for FindOptions.\n */\nexport type FindCacheOptions = {\n\n    /**\n     * Cache identifier.\n     */\n    id?: any;\n\n    /**\n     * Caching time in milliseconds.\n     */\n    milliseconds?: number;\n};\n\n/**\n * Set of criteria and options to return entities by.\n */\nexport type FindOptions<E> = {\n\n    /**\n     * Specifies what columns should be selected.\n     * Used for partial selections.\n     */\n    select?: FindOptionsSelect<E>;\n\n    /**\n     * Conditions that should be applied to match entities.\n     */\n    where?: FindOptionsWhere<E>;\n\n    /**\n     * Order, in which entities should be ordered.\n     */\n    order?: FindOptionsOrder<E>;\n\n    /**\n     * Relations that needs to be loaded in a separate SQL queries.\n     * If you have lot of data returned by your query then its more efficient to load it using relations instead of joins.\n     */\n    relations?: FindOptionsRelation<E>;\n\n    /**\n     * Query caching options.\n     * Disabled by default.\n     * If set to true then caching is enabled based on global options.\n     * You can also provide a number of milliseconds - caching time.\n     */\n    cache?: boolean | number | FindCacheOptions;\n\n    /**\n     * Extra options.\n     */\n    options?: FindExtraOptions;\n\n    /**\n     * Enables or disables query result caching.\n     */\n    lock?: { mode: \"optimistic\", version: number | Date } | { mode: \"pessimistic_read\" | \"pessimistic_write\" };\n\n    /**\n     * Offset (paginated) where from entities should be taken.\n     */\n    skip?: number;\n\n    /**\n     * Limit (paginated) - max number of entities should be taken.\n     */\n    take?: number;\n\n};\n"],"sourceRoot":".."}