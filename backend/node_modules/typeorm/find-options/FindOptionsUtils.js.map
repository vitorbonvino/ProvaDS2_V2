{"version":3,"sources":["../../src/find-options/FindOptionsUtils.ts"],"names":[],"mappings":"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","file":"FindOptionsUtils.js","sourcesContent":["import {Any, Between, Equal, ILike, In, LessThan, Like, MoreThan, Not, Raw} from \"..\";\nimport {FindOperator} from \"./FindOperator\";\nimport {FindOptions} from \"./FindOptions\";\n\n/**\n * Utilities to work with FindOptions.\n */\nexport class FindOptionsUtils {\n\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    static isFindOptions(obj: any): obj is FindOptions<any> {\n        const possibleOptions: FindOptions<any> = obj;\n        return possibleOptions && (\n            possibleOptions.select instanceof Object ||\n            possibleOptions.where instanceof Object ||\n            possibleOptions.relations instanceof Object ||\n            possibleOptions.order instanceof Object ||\n            possibleOptions.options instanceof Object ||\n            possibleOptions.cache instanceof Object ||\n            possibleOptions.lock instanceof Object ||\n            typeof possibleOptions.cache === \"boolean\" ||\n            typeof possibleOptions.cache === \"number\" ||\n            typeof possibleOptions.skip === \"number\" ||\n            typeof possibleOptions.take === \"number\" ||\n            typeof possibleOptions.skip === \"string\" ||\n            typeof possibleOptions.take === \"string\"\n        );\n    }\n\n}\n\n/**\n * Normalizes find options.\n */\nexport function normalizeFindOptions<T>(options: FindOptions<T>): FindOptions<T> {\n\n    const where = options.where;\n    if (!where)\n        return { ...options };\n    if (!(where instanceof Object))\n        return { ...options };\n    if (where instanceof FindOperator)\n        return { ...options };\n\n    const recursively$FindOption = (obj: any) => {\n        const valueKeys = Object.keys(obj);\n        if (valueKeys.length === 1) {\n            let value = obj[valueKeys[0]];\n            if (value instanceof Object && !(value instanceof Array) && !(value instanceof Function))\n                value = recursively$FindOption(value);\n\n            if (valueKeys[0] === \"$any\") {\n                return Any(value);\n\n            } else if (valueKeys[0] === \"$between\") {\n                return Between(value[0], value[1]);\n\n            } else if (valueKeys[0] === \"$equal\") {\n                return Equal(value);\n\n            } else if (valueKeys[0] === \"$iLike\") {\n                return ILike(value);\n\n            } else if (valueKeys[0] === \"$in\") {\n                return In(value);\n\n            } else if (valueKeys[0] === \"$lessThan\") {\n                return LessThan(value);\n\n            } else if (valueKeys[0] === \"$like\") {\n                return Like(value);\n\n            } else if (valueKeys[0] === \"$moreThan\") {\n                return MoreThan(value);\n\n            } else if (valueKeys[0] === \"$not\") {\n                return Not(value);\n\n            } else if (valueKeys[0] === \"$raw\") {\n                return Raw(value);\n            }\n        }\n\n        return false;\n    };\n\n    const recursivelyWhere = <T extends any>(where: T): T => {\n\n        if (where instanceof Array)\n            return where.map((where: any) => recursivelyWhere(where));\n\n        return Object.keys(where).reduce((newWhere, key) => {\n            if (where[key] instanceof Object && !(where[key] instanceof FindOperator)) {\n                newWhere[key] = recursively$FindOption(where[key]);\n\n                // in the case if $find operator was not found we'll have a false as a value\n                // we need to recursive where because it can be another where options\n                if (newWhere[key] === false)\n                    newWhere[key] = recursivelyWhere(where[key]);\n\n            } else {\n                newWhere[key] = where[key];\n            }\n            return newWhere;\n        }, {} as T);\n    };\n\n    return { ...options, where: recursivelyWhere(options.where!) };\n}\n"],"sourceRoot":".."}